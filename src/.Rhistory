svm.fit
svm.fit$finalModel
confusionMatrix(train.NPS$desc.NPS, predict(svm.fit, train.NPS))
confusionMatrix(test.NPS$desc.NPS, predict(svm.fit, test.NPS))
bootControl <- trainControl(method = "cv",
savePred=T)
svm.fit <- train(desc.NPS ~.,
data= train.NPS,
method = "svmLinear", tuneLength = 3,
trControl = bootControl, scaled = F)
svm.fit
svm.fit$finalModel
confusionMatrix(train.NPS$desc.NPS, predict(svm.fit, train.NPS))
confusionMatrix(test.NPS$desc.NPS, predict(svm.fit, test.NPS))
bootControl <- trainControl(method = "cv", number = 4)
rf.fit <- train(desc.NPS ~.,
data= train.NPS,
method = "rf", tuneLength = 4,
trControl = bootControl, scaled = F,
do.trace = T, ntree = 100,
importance=T)
rf.fit
rf.fit$finalModel
bootControl <- trainControl(method = "cv", number = 4)
nnet.fit <- train(desc.NPS ~.,
data= train.NPS,
method = "nnet",
trControl = bootControl, scaled = T)
nnet.fit
nnet.fit$finalModel
plot(nnet.fit)
confusionMatrix(train.NPS$desc.NPS, predict(nnet.fit, train.NPS))
confusionMatrix(test.NPS$desc.NPS, predict(nnet.fit, test.NPS))
knitr::opts_chunk$set(echo = TRUE)
require("knitr")
opts_knit$set(root.dir="./")
library(data.table)
library(caret)
ruta <-'C:/Users/izask/Modelo Parking/Modelo Parkings/src'
setwd(ruta)
source('./R_funciones.R')
t.parkings <- as.data.table(read.csv('../dat/datos_parkings.csv',
sep = ';', dec = ',',header = TRUE))
source('./R_funciones.R')
t.parkings <- as.data.table(read.csv('../dat/datos_parkings.csv',
sep = ';', dec = ',',header = TRUE))
colnames(t.parkings)
t.parkings<-t.parkings[,-c('desc.NPS')]
t.parkings<- na.omit(t.parkings)
colnames(t.parkings)
t.parkings.transf <- as.data.table(read.csv('../dat/datos_parkings.csv',
sep = ';', dec = ',',header = TRUE))
t.parkings.transf <-t.parkings[,-c('desc.NPS')]
t.parkings.transf <- as.data.table(read.csv('../dat/datos_parkings.csv',
sep = ';', dec = ',',header = TRUE))
t.parkings.transf <-t.parkings[,-c('desc.NPS')]
t.parkings.transf <-t.parkings.transf[,-c('desc.NPS')]
t.parkings.transf <- as.data.table(read.csv('../dat/datos_parkings.csv',
sep = ';', dec = ',',header = TRUE))
colnames(t.parkings.transf)
t.parkings.transf <- as.data.table(read.csv('../dat/datos_parkings.csv',
sep = ';', dec = ',',header = TRUE))
t.parkings.transf <-t.parkings.transf[,-c('desc.NPS')]
t.parkings.transf <- na.omit(t.parkings.transf)
t.parkings.analizar <- as.data.table(read.csv('../dat/datos_parkings.csv',
sep = ';', dec = ',',header = TRUE))
t.parkings.analizar <- t.parkings.analizar[,-c('desc.NPS')]
t.parkings.analizar <- na.omit(t.parkings.analizar)
inTrain <- sample(1:nrow(t.parkings.analizar),
nrow(t.parkings.analizar)*0.3)
train.Ingresos  <- t.parkings.analizar[-inTrain,]
test.Ingresos   <- t.parkings.analizar[inTrain,]
train.Ingresos
bootControl <- trainControl(method = "cv",
savePred=T)
svm.fit <- train(monthly.ingresos.log~.,
data= train.Ingresos,
method = "svmRadial", tuneLength = 3,
trControl = bootControl, scaled = F)
svm.fit
svm.fit$finalModel
# Density plots de los diferentes folds/iteraciones
resampleHist(svm.fit)
bootControl <- trainControl(method = "cv",
savePred=T)
svm.fit <- train(monthly.ingresos.log~.,
data= train.Ingresos,
method = "svmRadial", tuneLength = 3,
trControl = bootControl, scaled = F)
svm.fit
svm.fit$finalModel
# Density plots de los diferentes folds/iteraciones
resampleHist(svm.fit)
svmImp <- varImp(svm.fit, scale = F)
svmImp
plot(svmImp, top = 20, main = "SVM Importance")
bootControl <- trainControl(method = "cv",
savePred=T)
svm.fit <- train(monthly.ingresos.log~.,
data= train.Ingresos,
method = "svmLinear", tuneLength = 3,
trControl = bootControl, scaled = F)
svm.fit
svm.fit$finalModel
# Density plots de los diferentes folds/iteraciones
resampleHist(svm.fit)
bootControl <- trainControl(method = "cv", number = 4)
rf.fit <- train(monthly.ingresos.log~.,
data= train.Ingresos,
method = "rf", tuneLength = 4,
trControl = bootControl, scaled = F,
do.trace = T, ntree = 100,
importance=T)
rf.fit
rf.fit$finalModel
plot(rf.fit)
rfImp <- varImp(rf.fit, scale = F)
plot(rfImp, top = 20, main = "RF Importance")
bootControl <- trainControl(method = "cv", number = 4)
nnet.fit <- train(monthly.ingresos.log~.,
data= train.Ingresos,
method = "nnet",
trControl = bootControl, scaled = T)
nnet.fit
nnet.fit$finalModel
plot(nnet.fit)
nnImp <- varImp(nnet.fit, scale = F)
plot(nnImp, top = 20, main = "NN Importance")
colnames(parking.pca)
colnames(t.parkings.analizar)
?saveRDS
t.parkings.analizar <- as.data.table(read.csv('../dat/datos_parkings.csv',
sep = ';', dec = ',',header = TRUE))
colnames(t.parkings.analizar)
t.parkings.analizar <- as.data.table(read.csv('../dat/datos_parkings.csv',
sep = ';', dec = ',',header = TRUE))
?trainControl
bootControl <- trainControl(method = "boot_all", number = 4)
nnet.fit <- train(desc.NPS ~.,
data= train.NPS,
method = "nnet",
trControl = bootControl, scaled = T)
nnet.fit
nnet.fit$finalModel
plot(nnet.fit)
confusionMatrix(train.NPS$desc.NPS, predict(nnet.fit, train.NPS))
confusionMatrix(test.NPS$desc.NPS, predict(nnet.fit, test.NPS))
knitr::opts_chunk$set(echo = TRUE)
require("knitr")
opts_knit$set(root.dir="./")
library(data.table)
library(caret)
ruta <-'C:/Users/izask/Modelo Parking/Modelo Parkings/src'
setwd(ruta)
source('./R_funciones.R')
t.parkings.analizar <- as.data.table(read.csv('../dat/datos_parkings.csv',
sep = ';', dec = ',',header = TRUE))
t.parkings.analizar <- t.parkings.analizar[,c('desc.NPS', 'Max_height.log',
'Feature_sgv',
'Feature_handicapped',
'n_sitios.fitness',
'Feature_credit_card',
'Feature_phone_coverage',
'Feature_elevator',
'num.meses',
'tipo.aeropuerto.2b..PARK.WALK',
'n_sitios.servicio.publico',
'n_sitios.hospedaje',
'n_sitios.hosteleria',
'n_sitios.aeropuerto',
'Stock',
'reservas.medias.mes.mas.de.7.días',
'reservas.medias.mes.entre.4.y.7.días',
'reservas.medias.mes.7.horas.o.menos',
'reservas.medias.mes.3.días.o.menos',
'reservas.medias.mes.entre.8.y.12.horas',
'reservas.medias.mes.mas.de.12.horas',
'Feature_twenty_four_hours')]
t.parkings.analizar <- na.omit(t.parkings.analizar)
bootControl <- trainControl(method = "boot_all", number = 4)
nnet.fit <- train(desc.NPS ~.,
data= train.NPS,
method = "nnet",
trControl = bootControl, scaled = T)
nnet.fit
nnet.fit$finalModel
plot(nnet.fit)
confusionMatrix(train.NPS$desc.NPS, predict(nnet.fit, train.NPS))
confusionMatrix(test.NPS$desc.NPS, predict(nnet.fit, test.NPS))
colnames(train.NPS)
bootControl <- trainControl(method = "boot_all", number = 4)
nnet.fit <- train(desc.NPS ~.,
data= train.NPS,
method = "nnet",
trControl = bootControl, scaled = T)
t.parkings.analizar <- na.omit(t.parkings.analizar)
inTrain <- sample(1:nrow(t.parkings.analizar),
nrow(t.parkings.analizar)*0.3)
train.NPS  <- t.parkings.analizar[-inTrain,]
test.NPS   <- t.parkings.analizar[inTrain,]
bootControl <- trainControl(method = "boot_all", number = 4)
nnet.fit <- train(desc.NPS ~.,
data= train.NPS,
method = "nnet",
trControl = bootControl, scaled = T)
is.na(train.NPS)
train.NPS[is.na(train.NPS)]
train.NPS[is.na(train.NPS),]
inTrain <- sample(1:nrow(t.parkings.analizar),
nrow(t.parkings.analizar)*0.3)
train.NPS  <- t.parkings.analizar[-inTrain,]
test.NPS   <- t.parkings.analizar[inTrain,]
bootControl <- trainControl(method = "boot_all", number = 4)
nnet.fit <- train(desc.NPS ~.,
data= train.NPS,
method = "nnet",
trControl = bootControl, scaled = T)
nrow(train.NPS)
nrow(is.omit(train.NPS)
)
nrow(na.omit(train.NPS))
trainControl()
?trainControl
bootControl <- trainControl(method = "boot", number = 4)
nnet.fit <- train(desc.NPS ~.,
data= train.NPS,
method = "nnet",
trControl = bootControl, scaled = T)
nnet.fit
nnet.fit$finalModel
plot(nnet.fit)
confusionMatrix(train.NPS$desc.NPS, predict(nnet.fit, train.NPS))
confusionMatrix(test.NPS$desc.NPS, predict(nnet.fit, test.NPS))
?trainControl
bootControl <- trainControl(method = "boot632", number = 4)
nnet.fit <- train(desc.NPS ~.,
data= train.NPS,
method = "nnet",
trControl = bootControl, scaled = T)
nnet.fit
nnet.fit$finalModel
plot(nnet.fit)
confusionMatrix(train.NPS$desc.NPS, predict(nnet.fit, train.NPS))
confusionMatrix(test.NPS$desc.NPS, predict(nnet.fit, test.NPS))
bootControl <- trainControl(method = "LGOCV", number = 4)
bootControl <- trainControl(method = "LGOCV", number = 4)
nnet.fit <- train(desc.NPS ~.,
data= train.NPS,
method = "nnet",
trControl = bootControl, scaled = T)
nnet.fit
nnet.fit$finalModel
plot(nnet.fit)
confusionMatrix(train.NPS$desc.NPS, predict(nnet.fit, train.NPS))
confusionMatrix(test.NPS$desc.NPS, predict(nnet.fit, test.NPS))
knitr::opts_chunk$set(echo = TRUE)
require("knitr")
opts_knit$set(root.dir="./")
library(data.table)
library(caret)
ruta <-'C:/Users/izask/Modelo Parking/Modelo Parkings/src'
setwd(ruta)
source('./R_funciones.R')
t.parkings.analizar <- as.data.table(read.csv('../dat/datos_parkings.csv',
sep = ';', dec = ',',header = TRUE))
t.parkings.analizar <- t.parkings.analizar[, c('monthly.ingresos.log',
'Max_height.log',
'Stock',
'num.meses',
'reservas.medias.mes.mas.de.7.días',
'n_sitios.hospedaje',
'n_sitios.hosteleria',
'reservas.medias.mes.entre.4.y.7.días',
'reservas.medias.mes.7.horas.o.menos',
'reservas.medias.mes.3.días.o.menos',
'reservas.medias.mes.entre.8.y.12.horas',
'reservas.medias.mes.mas.de.12.horas',
'Feature_twenty_four_hours',
'parking.500m',
'parking.1000m',
'Feature_elevator',
'Feature_sgv',
'n_sitios.comercio',
'n_sitios.financiero',
'n_sitios.aeropuerto',
'Feature_handicapped',
'Feature_washing',
'Spots',
'Feature_security',
'Feature_toilets')]
t.parkings.analizar <- na.omit(t.parkings.analizar)
inTrain <- sample(1:nrow(t.parkings.analizar),
nrow(t.parkings.analizar)*0.3)
train.Ingresos  <- t.parkings.analizar[-inTrain,]
test.Ingresos   <- t.parkings.analizar[inTrain,]
bootControl <- trainControl(method = "cv", number = 4)
rf.fit <- train(monthly.ingresos.log~.,
data= train.Ingresos,
method = "rf", tuneLength = 4,
trControl = bootControl, scaled = F,
do.trace = T, ntree = 100,
importance=T)
rf.fit
rf.fit$finalModel
plot(rf.fit)
rfImp <- varImp(rf.fit, scale = F)
plot(rfImp, top = 20, main = "RF Importance")
rf.fit$finalModel
rf.fit
plot(rf.fit)
rf.fit$results
rf.fit$pred
rf.fit$bestTune
rf.fit$dots
rf.fit$metric
rf.fit$finalModel
rf.fit$trainingData
rf.fit
rf.fit$resample
rf.fit$yLimits
?train
predValues <- predict(rf.fit,
, newdata = test.Ingresos[,-c('monthly.ingresos.log')])
par(mfrow=c(1,1))
plot(predValues, test.Ingresos$monthly.ingresos.log, main="ARBOLES")
abline(0,1,lty=2,col=2)
colnames(predValues)
predValues
check.table <- rbind(predValues,
test.Ingresos$monthly.ingresos.log)
colnames(check.table) <- c('Prediccion', 'Real')
dim(predValues)
nrow(predValues)
predValues
length(predValues)
check.table <- as.data.table(predValues)
dim(check.table)
colnames(predValues)
colnames(check.table)
check.table$realValues <- test.Ingresos$monthly.ingresos.log
check.table <- check.table[, lapply(exp)]
check.table <- check.table[, lapply(x, exp)]
check.table <- check.table[, lapply(.SD, exp)]
View(check.table)
check.table <- as.data.table(predValues)
check.table$realValues <- test.Ingresos$monthly.ingresos.log
check.table <- check.table[, lapply(.SD, exp), .SDcols = 1:2]
View(check.table)
colnames(check.table)
check.table[, error:=predValues, realValues]
check.table <- as.data.table(predValues)
check.table$realValues <- test.Ingresos$monthly.ingresos.log
check.table <- check.table[, lapply(.SD, exp), .SDcols = 1:2]
check.table[, error:= realValues-predValues]
summary(check.table$error)
hist(check.table$error, main='errores')
?hist
hist(check.table$error,10
breaks = ,
main='errores')
hist(check.table$error,
breaks = 10,
main='errores')
hist(check.table$error,
breaks = 30,
main='errores')
hist(check.table$error,
breaks = 40,
main='errores')
hist(check.table$error,
breaks = 30,
main='errores')
t.parkings <- as.data.table(read.csv('../dat/datos_parkings.csv',
sep = ';', dec = ',',header = TRUE))
check.table <- as.data.table(predValues)
check.table$realValues <- t.parkings$monthly.ingresos.log
colnames(t.parkings)
t.parkings.analizar <- t.parkings[, c('Id_parking',
'monthly.ingresos.log',
'Max_height.log',
'Stock',
'num.meses',
'reservas.medias.mes.mas.de.7.días',
'n_sitios.hospedaje',
'n_sitios.hosteleria',
'reservas.medias.mes.entre.4.y.7.días',
'reservas.medias.mes.7.horas.o.menos',
'reservas.medias.mes.3.días.o.menos',
'reservas.medias.mes.entre.8.y.12.horas',
'reservas.medias.mes.mas.de.12.horas',
'Feature_twenty_four_hours',
'parking.500m',
'parking.1000m',
'Feature_elevator',
'Feature_sgv',
'n_sitios.comercio',
'n_sitios.financiero',
'n_sitios.aeropuerto',
'Feature_handicapped',
'Feature_washing',
'Spots',
'Feature_security',
'Feature_toilets')]
t.parkings.analizar <- na.omit(t.parkings.analizar)
inTrain <- sample(1:nrow(t.parkings.analizar),
nrow(t.parkings.analizar)*0.3)
train.Ingresos  <- t.parkings.analizar[-inTrain,]
test.Ingresos   <- t.parkings.analizar[inTrain,]
bootControl <- trainControl(method = "cv", number = 4)
rf.fit <- train(monthly.ingresos.log~.,
data= train.Ingresos[,-c('Id_parking')],
method = "rf", tuneLength = 4,
trControl = bootControl, scaled = F,
do.trace = T, ntree = 100,
importance=T)
rf.fit
rf.fit$finalModel
plot(rf.fit)
predValues <- predict(rf.fit,
, newdata = test.Ingresos[,-c('Id_parking','monthly.ingresos.log')])
par(mfrow=c(1,1))
plot(predValues,
test.Ingresos$monthly.ingresos.log,
main="Decision Tree")
abline(0,1,lty=2,col=2)
check.table <- t.parkings
check.table <- as.data.table(predValues)
check.table <- t.parkings[, list(Id_parking,
realValues,
monthly.ingresos.log)]
check.table <- t.parkings[, list(Id_parking,
realValues=monthly.ingresos.log)]
colnames()
colnames(check.table)
check.table$predValues <- as.data.table(predValues)
check.table <- test.Ingresos[, list(Id_parking,
realValues=monthly.ingresos.log)]
check.table$predValues <- as.data.table(predValues)
colnames(check.table)
check.table <- check.table[, lapply(.SD, exp), .SDcols = 2:3]
check.table[, error:= realValues-predValues]
summary(check.table$error)
quantile(table$error, c(.05, .25, 0.50, 0.75, 0.95))
quantile(check.table$error, c(.05, .25, 0.50, 0.75, 0.95))
quantile(check.table$error, c(.10, .25, 0.50, 0.75, 0.90))
quantile(check.table$error, c(.05, .10, .25, .50,
.75, .90, .95))
check.table <- train.Ingresos[, list(Id_parking,
realValues=monthly.ingresos.log)]
check.table$predValues <- as.data.table(predValues)
summary(check.table$error)
hist(check.table$error,
breaks = 30,
main='errores')
check.table <- test.Ingresos[, list(Id_parking,
realValues=monthly.ingresos.log)]
check.table$predValues <- as.data.table(predValues)
check.table <- check.table[, lapply(.SD, exp), .SDcols = 2:3]
check.table[, error:= realValues-predValues]
hist(check.table$error,
breaks = 30,
main='errores')
summary(check.table$error)
quantile(check.table$error, c(.05, .10, .25, .50,
.75, .90, .95))
t.test(check.table$error)
quantile(check.table$error, c(.05, .10, .25, .50,
.75, .90, .95))
colnames(check.table)
check.table <- test.Ingresos[, list(Id_parking,
realValues=monthly.ingresos.log)]
check.table$predValues <- as.data.table(predValues)
check.table <- check.table[, lapply(.SD, exp), .SDcols = 2:3]
check.table[, error:= realValues-predValues]
quantile(check.table$error, c(.05, .10, .25, .50,
.75, .90, .95))
colnames(check.table)
check.table <- test.Ingresos[, list(Id_parking,
realValues=monthly.ingresos.log)]
colnames(check.table)
check.table$predValues <- as.data.table(predValues)
check.table <- check.table[, lapply(.SD, exp), .SDcols = 2:3,
by = Id_parking]
check.table[, error:= realValues-predValues]
quantile(check.table$error, c(.05, .10, .25, .50,
.75, .90, .95))
colnames(check.table)
q90 <- merge(check.table[error >= 198, list(Id_parking)],
test.Ingresos,
by.x = 'Id_parking', by.y = 'Id_parking',
all.x = TRUE, all.y = FALSE)
summary(q90)
t.parkings <- as.data.table(read.csv('../dat/tabla_parkings.csv',
sep = ';', dec = ',',header = TRUE))
q90 <- merge(check.table[error >= 198, list(Id_parking)],
t.parkings,
by.x = 'Id_parking', by.y = 'Id_parking',
all.x = TRUE, all.y = FALSE)
summary(q90)
q05 <- merge(check.table[error <= 43, list(Id_parking)],
t.parkings,
by.x = 'Id_parking', by.y = 'Id_parking',
all.x = TRUE, all.y = FALSE)
summary(q90)
summary(q05)
q05.a.q95 <- merge(check.table[error > 43 & error < 198,
list(Id_parking)],
t.parkings,
by.x = 'Id_parking', by.y = 'Id_parking',
all.x = TRUE, all.y = FALSE)
summary(q05)
summary(q05.a.q95)
